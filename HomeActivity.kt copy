package id.otomoto.dealer.view.home

import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.view.MenuItem
import android.view.View
import android.widget.AbsListView
import android.widget.Toast
import androidx.appcompat.app.ActionBarDrawerToggle
import androidx.core.view.GravityCompat
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import id.otomoto.dealer.utils.item_decoration.CustomGridItemDecoration
import id.otomoto.dealer.R
import id.otomoto.dealer.contract.home.HomeContract
import id.otomoto.dealer.presenter.home.HomePresenter
import id.otomoto.dealer.utils.UtilsKt
import id.otomoto.dealer.view.base.BaseActivity
import id.otomoto.dealer.view.login.LoginActivity
import com.google.android.material.navigation.NavigationView
import id.otomoto.dealer.BuildConfig
import id.otomoto.dealer.adapters.UnitListAdapter
import id.otomoto.dealer.model.UnitListResponse
import id.otomoto.dealer.utils.UserPreference
import id.otomoto.dealer.view.order.BiddingStatusActivity
import kotlinx.android.synthetic.main.activity_home.*
import kotlinx.android.synthetic.main.layout_navigation_view.*
import kotlinx.android.synthetic.main.nav_header_drawer.view.*
import retrofit2.Call

/**
 * Created by Billy Saputra on 2019-08-15.
 */
class HomeActivity : BaseActivity(), HomeContract.View, NavigationView.OnNavigationItemSelectedListener {
    private var presenter = HomePresenter(this)
    private lateinit var unitListAdapter : UnitListAdapter
    private lateinit var gridLayoutManager: GridLayoutManager

    private var PAGE = 1
    private var MAX_PAGE = 0
    private var isUserScroll = false
    private var visibleItemCount = 0
    private var totalItemCount = 0
    private var pastVisiblesItems = 0
    private var doubleBackToExitPressedOnce = false

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_home)
        setSupportActionBar(toolbar)
        setNavigationDrawer()

        presenter.getUnitList(1)
    }

    private fun setNavigationDrawer() {
        val toggle = ActionBarDrawerToggle(this, drawer_layout, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close)
        drawer_layout.addDrawerListener(toggle)
        toggle.syncState()
        nav_view.setNavigationItemSelectedListener(this)

        val header = nav_view.getHeaderView(0)
        header.tv_dealer_name.text = UserPreference.getInstance().dealerName
        header.tv_user_email.text = UserPreference.getInstance().email
        //Set version code and name
        val versionCodeBuild = BuildConfig.VERSION_CODE
        val versionNameBuild = BuildConfig.VERSION_NAME
        tv_app_version.text = resources.getString(R.string.version, versionNameBuild, versionCodeBuild)

        Glide.with(this).load("https://webstyle.unicomm.fsu.edu/img/placeholders/ratio-pref-1-1.png").apply(UtilsKt.glideRequestOption()).into(header.iv_nav_draw)
    }


    private fun showLogoutDialog() {
        UtilsKt.showConfirmationDialog(this, object : UtilsKt.PositiveButtonListener {
            override fun onPositiveButton() {
                UserPreference.getInstance().setLogout()
                exitToLogin()
                //presenter.doLogout()
            }
        }, getString(R.string.dialog_logout_title), getString(R.string.dialog_logout_msg))
    }

    override fun showSnackBar(message: String) {
        UtilsKt.showSnackBar(rv_home, message)
    }

    override fun showRetryDialog(call: Call<*>) {
        UtilsKt.showRetryDialog(this, object : UtilsKt.RetryButtonListener {
            override fun onRetryButton() {
                presenter.retryCall(call)
            }
        })
    }

    override fun setUnitData(unitListResponse: UnitListResponse) {
        unitListAdapter = UnitListAdapter(this, unitListResponse.unitList)
        gridLayoutManager = GridLayoutManager(this, 2)
        rv_home.layoutManager = gridLayoutManager
        rv_home.adapter = unitListAdapter
        rv_home.addItemDecoration(CustomGridItemDecoration(2, resources.getDimension(R.dimen.padding_margin_8dp).toInt(), true))
        this.MAX_PAGE = unitListResponse.totalPages

        // Setup Lazy Load
        rv_home.visibility = View.VISIBLE
        rv_home.addOnScrollListener(object : RecyclerView.OnScrollListener() {
            override fun onScrollStateChanged(recyclerView: RecyclerView, newState: Int) {
                super.onScrollStateChanged(recyclerView, newState)
                if (newState == AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL) isUserScroll = true
            }

            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
                super.onScrolled(recyclerView, dx, dy)
                visibleItemCount = gridLayoutManager.childCount
                totalItemCount = gridLayoutManager.itemCount
                pastVisiblesItems = gridLayoutManager.findFirstVisibleItemPosition()
                if (isUserScroll && (visibleItemCount + pastVisiblesItems) == totalItemCount) {
                    PAGE++
                    if (PAGE <= MAX_PAGE) {
                        presenter.getUnitList(PAGE)
                        isUserScroll = false
                    }
                }
            }
        })
    }

    override fun setUnitDataParam(unitListResponse: UnitListResponse) {
        if (PAGE > 1) unitListAdapter.loadMoreData(unitListResponse.unitList)
    }

    override fun onBackPressed() {
        if (drawer_layout.isDrawerOpen(GravityCompat.START)) {
            drawer_layout.closeDrawer(GravityCompat.START)
        } else {
            if (doubleBackToExitPressedOnce) {
                super.onBackPressed()
                System.exit(0)
                return
            }
            this.doubleBackToExitPressedOnce = true
            Toast.makeText(this, getString(R.string.double_pressed_to_exit), Toast.LENGTH_SHORT).show()
            Handler().postDelayed({ doubleBackToExitPressedOnce = false }, 2000)
        }
    }

    override fun onNavigationItemSelected(item: MenuItem): Boolean {
        // Handle navigation view item clicks here.
        when (item.itemId) {
            R.id.nav_logout -> showLogoutDialog()
            R.id.nav_bids -> startActivity(Intent(this, BiddingStatusActivity::class.java))
        }
        drawer_layout.closeDrawer(GravityCompat.START)
        return true
    }

    override fun exitToLogin() {
        UtilsKt.intentWithClearTask(this, LoginActivity::class.java)
    }
}